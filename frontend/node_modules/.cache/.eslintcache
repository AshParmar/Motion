[{"C:\\Users\\ashpa\\Downloads\\Emotify-master\\Emotify-master\\frontend\\src\\index.js":"1","C:\\Users\\ashpa\\Downloads\\Emotify-master\\Emotify-master\\frontend\\src\\About.js":"2","C:\\Users\\ashpa\\Downloads\\Emotify-master\\Emotify-master\\frontend\\src\\App.js":"3"},{"size":587,"mtime":1742804515162,"results":"4","hashOfConfig":"5"},{"size":975,"mtime":1742804514974,"results":"6","hashOfConfig":"5"},{"size":7109,"mtime":1742833961520,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ar14m6",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},"C:\\Users\\ashpa\\Downloads\\Emotify-master\\Emotify-master\\frontend\\src\\index.js",[],[],"C:\\Users\\ashpa\\Downloads\\Emotify-master\\Emotify-master\\frontend\\src\\About.js",["18"],[],"C:\\Users\\ashpa\\Downloads\\Emotify-master\\Emotify-master\\frontend\\src\\App.js",["19"],[],"import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [mood, setMood] = useState('');\n  const [songs, setSongs] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [method, setMethod] = useState('webcam'); // 'webcam' or 'upload'\n  const [imagePreview, setImagePreview] = useState(null);\n\n  const fetchRecommendations = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await fetch('http://localhost:5000/recommendations');\n      \n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      setMood(data.mood);\n      setSongs(data.recommended_songs || []);\n    } catch (err) {\n      console.error(\"Fetch error:\", err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleImageUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      setImagePreview(URL.createObjectURL(file));\n      \n      const formData = new FormData();\n      formData.append('file', file);\n\n      const response = await fetch('http://localhost:5000/recommendations', {\n        method: 'POST',\n        body: formData\n      });\n\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      setMood(data.mood);\n      setSongs(data.recommended_songs || []);\n    } catch (err) {\n      console.error(\"Upload error:\", err);\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const playOnSpotify = (song) => {\n    if (song.link) {\n      window.open(song.link, '_blank');\n    } else {\n      // Fallback to search if direct link not available\n      window.open(`https://open.spotify.com/search/${encodeURIComponent(song.name + \" \" + song.artist)}`, '_blank');\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <div className=\"container\">\n          <span className=\"navbar-brand mb-0 h1\">Emotify</span>\n        </div>\n      </nav>\n\n      <main className=\"container mt-4\">\n        <div className=\"text-center mb-5\">\n          <h1 className=\"display-4\">Mood-Based Music Recommendations</h1>\n          <p className=\"lead\">Discover songs that match your current emotion</p>\n        </div>\n\n        <div className=\"row justify-content-center mb-4\">\n          <div className=\"col-md-8\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"btn-group w-100\" role=\"group\">\n                  <button\n                    className={`btn ${method === 'webcam' ? 'btn-primary' : 'btn-outline-primary'}`}\n                    onClick={() => setMethod('webcam')}\n                  >\n                    Use Webcam\n                  </button>\n                  <button\n                    className={`btn ${method === 'upload' ? 'btn-primary' : 'btn-outline-primary'}`}\n                    onClick={() => setMethod('upload')}\n                  >\n                    Upload Image\n                  </button>\n                </div>\n\n                {method === 'webcam' ? (\n                  <div className=\"text-center mt-3\">\n                    <button\n                      className=\"btn btn-success\"\n                      onClick={fetchRecommendations}\n                      disabled={loading}\n                    >\n                      {loading ? 'Detecting Mood...' : 'Start Detection'}\n                    </button>\n                  </div>\n                ) : (\n                  <div className=\"mt-3\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleImageUpload}\n                      className=\"form-control\"\n                      disabled={loading}\n                    />\n                    {imagePreview && (\n                      <div className=\"mt-3 text-center\">\n                        <img\n                          src={imagePreview}\n                          alt=\"Preview\"\n                          className=\"img-fluid rounded\"\n                          style={{maxHeight: '200px'}}\n                        />\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {error && (\n          <div className=\"alert alert-danger text-center\">\n            {error}\n            <br />\n            {error.includes('Failed to fetch') && (\n              <small>Make sure your Flask backend is running on port 5000</small>\n            )}\n          </div>\n        )}\n\n        {loading && (\n          <div className=\"text-center my-5\">\n            <div className=\"spinner-border text-primary\" role=\"status\">\n              <span className=\"visually-hidden\">Loading...</span>\n            </div>\n            <p>Analyzing your mood...</p>\n          </div>\n        )}\n\n        {mood && !loading && (\n          <div className=\"results-section\">\n            <div className=\"text-center mb-4\">\n              <h2>Your Mood: <span className=\"badge bg-info\">{mood}</span></h2>\n            </div>\n\n            {songs.length > 0 ? (\n              <div className=\"row\">\n                {songs.map((song, index) => (\n                  <div key={index} className=\"col-md-4 mb-4\">\n                    <div className=\"card h-100\">\n                      <div className=\"card-body text-center\">\n                        <h5 className=\"card-title\">{song.name}</h5>\n                        <p className=\"card-text text-muted\">{song.artist}</p>\n                        {song.album_cover && (\n                          <img\n                            src={song.album_cover}\n                            alt=\"Album cover\"\n                            className=\"img-fluid mb-3 rounded\"\n                            style={{maxHeight: '200px'}}\n                          />\n                        )}\n                      </div>\n                      <div className=\"card-footer bg-transparent text-center\">\n                        <button\n                          onClick={() => playOnSpotify(song)}\n                          className=\"btn btn-success\"\n                        >\n                          Play on Spotify\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"alert alert-warning text-center\">\n                No songs found for this mood. Please try again.\n              </div>\n            )}\n          </div>\n        )}\n      </main>\n\n      <footer className=\"bg-dark text-white text-center py-3 mt-5\">\n        <p>Â© {new Date().getFullYear()} Emotify - Mood-Based Music Recommendations</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;",{"ruleId":"20","severity":1,"message":"21","line":7,"column":21,"nodeType":"22","endLine":7,"endColumn":76},{"ruleId":"23","severity":1,"message":"24","line":1,"column":27,"nodeType":"25","messageId":"26","endLine":1,"endColumn":36},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar"]